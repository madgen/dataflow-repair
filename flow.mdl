IMPORT("../repair/examples/master.mdl", 'Program).

# For feature extraction we need
#
# data Feature = CInt Int | CStr Str | (Pred,Int) | (Atom,Int)

analyze ('Program) {
  Intensional(predName), HeadPredIx(predName, $ix) :-
    <: ..., $pred(...,$ix:$x,...), ... :- ... .:>, ID($pred,predName).

  BodyAtom($predID), BodyAtomIx($predID,$ix) :-
    <: ... :- ...,$predID(...,$ix:$x,...),... .:>.
  BodyAtom($predID), BodyAtomIx($predID,$ix) :-
    <: ... :- ...,NOT($predID(...,$ix:$x,...)),... .:>.

  ConstAux($pred,$ix,$constant) :-
    <: ... :- ..., $pred(...,$ix:$constant,...), ... .:>.
  ConstAux($pred,$ix,$constant) :-
    <: ... :- ..., NOT($pred(...,$ix:$constant,...)), ... .:>.

  ConstStr(constant, predName, ix) :-
    ConstAux(predID,ix,constantID),
    STR(constantID,constant),
    ID(predID, predName).

  ConstInt(constant, predName, ix) :-
    ConstAux(predID,ix,constantID),
    INT(constantID,constant),
    ID(predID, predName).

  NotSideAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...),
              ..., $pix2:$pred2(...,$ix2:$y,...),
              ..., $pix3:$pred3(...,$ix3:$z,...),... .:>,
    LT($pix1,$pix2), LT($pix2,$pix3).
  NotSideAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...),
              ..., $pix2:$pred2(...,$ix2:$y,...),
              ..., $pix3:NOT($pred3(...,$ix3:$z,...)),... .:>,
    LT($pix1,$pix2), LT($pix2,$pix3).
  NotSideAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...,$ix2:$y,...),
              ..., $pix3:$pred3(...,$ix3:$z,...),... .:>,
    LT($pix1,$pix3), LT($ix1,$ix2).
  NotSideAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...,$ix2:$y,...),
              ..., $pix3:NOT($pred3(...,$ix3:$z,...)),... .:>,
    LT($pix1,$pix3), LT($ix1,$ix2).

  # (predName,ix1) can't directly flow into (pred3,ix3), if there is some
  # intermediate positive parameter that flows into (pred3,ix3).
  #
  # This intermediate parameter can be in an intermediate atom or a later
  # parameter within the same atom.
  NotSide(predName,ix1,pred3,ix3) :-
    NotSideAux(pred1,pred3,x,y,z,ix1,ix3),
    ID(x,varName), ID(y,varName), ID(z,varName),
    ID(pred1,predName).

  SideAux($pix1,$pix2,$pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...),
              ..., $pix2:$pred2(...,$ix2:$y,...),... .:>.
  SideAux($pix1,$pix2,$pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...),
              ..., $pix2:NOT($pred2(...,$ix2:$y,...)),... .:>.

  Side(pred1Name,ix1,atom2Src,ix2), SideInternal(pred1Name,ix1,atom2,ix2) :-
    SideAux(pix1,pix2,atom1,atom2,ix1,ix2,x,y),
    ID(x,varName), ID(y,varName),
    LT(pix1,pix2),
    ID(atom1,pred1Name), NOT(NotSide(pred1Name,ix1,atom2,ix2)),
    SRC(atom2,atom2Src).

  Out(predName1,ix1,predName2,ix2) :-
    SideInternal(predName1,ix1,pred2,ix2),
    ID(pred2,predName2),
    Intensional(predName2).

  NotInAux($pix2,$pix3,$pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ..., $pred1(...,$ix1:$x,...), ...
        :- ..., $pix2:$pred2(...,$ix2:$y,...),
           ..., $pix3:$pred3(...,$ix3:$z,...),... .:>.
  NotInAux($pix2,$pix3,$pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ..., $pred1(...,$ix1:$x,...), ...
        :- ..., $pix2:$pred2(...,$ix2:$y,...),
           ..., $pix3:NOT($pred3(...,$ix3:$z,...)),... .:>.

  # (predName,ix1) can't directly flow into (pred3,ix3) if there is a positive
  # atom in between with the same variable.
  NotIn(predName,ix1,pred3,ix3) :-
    NotInAux(pix2,pix3,pred1,pred3,x,y,z,ix1,ix3),
    ID(x,varName), ID(y,varName), ID(z,varName),
    LT(pix2,pix3),
    ID(pred1,predName).

  InAux($pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ...,$pred1(...,$ix1:$x,...),... :- ...,$pred2(...,$ix2:$y,...),... .:>.
  InAux($pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ...,$pred1(...,$ix1:$x,...),... :- ...,NOT($pred2(...,$ix2:$y,...)),... .:>.

  In(pred1Name,ix1,atom2Src,ix2), InInternal(pred1Name,ix1,atom2,ix2) :-
    InAux(atom1,atom2,ix1,ix2,x,y),
    ID(x,varName), ID(y,varName),
    ID(atom1,pred1Name), NOT(NotIn(pred1Name,ix1,atom2,ix2)),
    SRC(atom2,atom2Src).

  Through(predName1,ix1,predName2,ix2) :-
    InInternal(predName1,ix1,pred2,ix2),
    ID(pred2,predName2),
    Intensional(predName2).

  OpenAtom(atomSrc,ix), OpenAtomaInternal(atomID,ix) :-
    BodyAtomIx(atomID,ix),
    NOT(SideInternal(_,_,atomID,ix)),
    NOT(InInternal(_,_,atomID,ix)),
    ID(atomID,predName),
    NOT(ConstStr(_,predName,ix)),
    NOT(ConstInt(_,predName,ix)),
    SRC(atomID,atomSrc).

  OpenPred(predName,ix) :-
    HeadPredIx(predName,ix),
    NOT(Out(_,_,predName,ix)),
    NOT(Through(_,_,predName,ix)),
    NOT(ConstStr(_,predName,ix)),
    NOT(ConstInt(_,predName,ix)).
  OpenPred(predName,ix) :-
    OpenAtomInternal(atomID,ix),
    ID(atomID,predName).
}

# Abstract flow connecting predicates via Throughs
Bridge(p,pix,q,qix) :- Through(p,pix,q,qix).
Bridge(p,pix,q,qix) :- Through(p,pix,r,rix), Bridge(r,rix,q,qix).

## Constants flow into predicates and atoms through a bridge.
#
# Integer Const -> Pred
ConstIntToPredFlow(int,p,pix) :- ConstInt(int,p,pix).
ConstIntToPredFlow(int,p,pix) :- ConstInt(int,r,rix), Bridge(r,rix,p,pix).

# Integer Const -> Atom
ConstIntToAtomFlow(int,a,aix) :- ConstIntToPredFlow(int,p,pix), In(p,pix,a,aix).

# String Const -> Pred
ConstStrToPredFlow(str,p,pix) :- ConstStr(str,p,pix).
ConstStrToPredFlow(str,p,pix) :- ConstStr(str,r,rix), Bridge(r,rix,p,pix).

# String Const -> Atom
ConstStrToAtomFlow(str,a,aix) :- ConstStrToPredFlow(str,p,pix), In(p,pix,a,aix).

# Concrete flow from a predicate to another
PredToPredFlow(p,pix,q,qix) :- Out(p,pix,q,qix).
PredToPredFlow(p,pix,q,qix) :- Out(p,pix,r,rix), Bridge(r,rix,q,qix).

# Concrete flow from a predicate to an atom
PredToAtomFlow(p,pix,a,aix) :- PredToPredFlow(p,pix,q,qix), In(q,qix,a,aix).
PredToAtomFlow(p,pix,a,aix) :- Side(p,pix,a,aix).

# Openness taints every predicate connected with a bridge
OpenToPredFlow(p,pix) :- OpenPred(p,pix).
OpenToPredFlow(p,pix) :- OpenPred(o,oix), Bridge(o,oix,p,pix).

# We have open atoms and open predicates that flow into some atom via In.
OpenToAtomFlow(a,aix) :- OpenAtom(a,aix).
OpenToAtomFlow(a,aix) :- OpenToPredFlow(p,pix), In(p,pix,a,aix).

OUTPUT('ConstStr).
OUTPUT('ConstInt).
OUTPUT('Side).
OUTPUT('Out).
OUTPUT('In).
OUTPUT('Through).
OUTPUT('OpenAtom).
OUTPUT('OpenPred).

OUTPUT('ConstStrToPredFlow).
OUTPUT('ConstStrToAtomFlow).
OUTPUT('ConstIntToPredFlow).
OUTPUT('ConstIntToAtomFlow).
OUTPUT('PredToPredFlow).
OUTPUT('PredToAtomFlow).
OUTPUT('OpenToPredFlow).
OUTPUT('OpenToAtomFlow).
