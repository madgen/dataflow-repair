IMPORT("../repair/example.mdl", 'Program).

# For feature extraction we need
#
# data Feature = CInt Int | CStr Str | (Pred,Int) | (Atom,Int)

analyze ('Program) {
  Intensional(predName) :-
    <: ..., $pred(...), ... :- ... .:>, ID($pred,predName).

  ConstAux($pred,$ix,$constant) :-
    <: ... :- ..., $pred(...,$ix:$constant,...), ... .:>.
  ConstAux($pred,$ix,$constant) :-
    <: ... :- ..., NOT($pred(...,$ix:$constant,...)), ... .:>.

  ConstStr(constant, predName, ix) :-
    ConstAux(predID,ix,constantID),
    STR(constantID,constant),
    ID(predID, predName).

  ConstInt(constant, predName, ix) :-
    ConstAux(predID,ix,constantID),
    INT(constantID,constant),
    ID(predID, predName).

  NotSideAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pred1(...,$ix1:$x,...),
              ..., $pred2(...,$ix2:$y,...),
              ..., $pred3(...,$ix3:$z,...),... .:>.
  NotSideAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pred1(...,$ix1:$x,...),
              ..., NOT($pred2(...,$ix2:$y,...)),
              ..., $pred3(...,$ix3:$z,...),... .:>.
#  NotSideAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
#    <: ... :- ..., $pred1(...,$ix1:$x,...),
#              ..., $pred2(...,$ix2:$y,...),
#              ..., NOT($pred3(...,$ix3:$z,...)),... .:>.
  NotSideAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pred1(...,$ix1:$x,...),
              ..., NOT($pred2(...,$ix2:$y,...)),
              ..., NOT($pred3(...,$ix3:$z,...)),... .:>.

  NotSide(predName,ix1,pred3,ix3) :-
    NotSideAux(pred1,pred3,x,y,z,ix1,ix3),
    ID(x,varName), ID(y,varName), ID(z,varName),
    LT(x,y), LT(y,z),
    ID(pred1,predName).

  SideAux($pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ... :- ..., $pred1(...,$ix1:$x,...),
              ..., $pred2(...,$ix2:$y,...),... .:>.
  SideAux($pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ... :- ..., $pred1(...,$ix1:$x,...),
              ..., NOT($pred2(...,$ix2:$y,...)),... .:>.

  Side(predName,ix1,pred2,ix2) :-
    SideAux(pred1,pred2,ix1,ix2,x,y),
    ID(x,varName), ID(y,varName),
    LT(pred1,pred2),
    LT(x,y),
    ID(pred1,predName), NOT(NotSide(predName,ix1,pred2,ix2)).

  Out(predName1,ix1,predName2,ix2) :-
    Side(predName1,ix1,pred2,ix2), ID(pred2,predName2), Intensional(predName2).

  NotInAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ..., $pred1(...,$ix1:$x,...), ...
        :- ..., $pred2(...,$ix2:$y,...),
           ..., $pred3(...,$ix3:$z,...),... .:>.
  NotInAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ..., $pred1(...,$ix1:$x,...), ...
        :- ..., NOT($pred2(...,$ix2:$y,...)),
           ..., $pred3(...,$ix3:$z,...),... .:>.
#  NotInAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
#    <: ..., $pred1(...,$ix1:$x,...), ...
#        :- ..., $pred2(...,$ix2:$y,...),
#           ..., NOT($pred3(...,$ix3:$z,...)),... .:>.
  NotInAux($pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ..., $pred1(...,$ix1:$x,...), ...
        :- ..., NOT($pred2(...,$ix2:$y,...)),
           ..., NOT($pred3(...,$ix3:$z,...)),... .:>.

  NotIn(predName,ix1,pred3,ix3) :-
    NotInAux(pred1,pred3,x,y,z,ix1,ix3),
    ID(x,varName), ID(y,varName), ID(z,varName),
    LT(y,z),
    ID(pred1,predName).

  InAux($pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ...,$pred1(...,$ix1:$x,...),... :- ...,$pred2(...,$ix2:$y,...),... .:>.
  InAux($pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ...,$pred1(...,$ix1:$x,...),... :- ...,NOT($pred2(...,$ix2:$y,...)),... .:>.

  In(predName,ix1,pred2,ix2) :-
    InAux(pred1,pred2,ix1,ix2,x,y),
    ID(x,varName), ID(y,varName),
    ID(pred1,predName), NOT(NotIn(predName,ix1,pred2,ix2)).

  Through(predName1,ix1,predName2,ix2) :-
    In(predName1,ix1,pred2,ix2), ID(pred2,predName2), Intensional(predName2).
}

OUTPUT('ConstStr).
OUTPUT('ConstInt).
OUTPUT('NotSide).
OUTPUT('Side).
OUTPUT('Out).
OUTPUT('NotIn).
OUTPUT('In).
OUTPUT('Through).
