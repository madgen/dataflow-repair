IMPORT("../repair/example.mdl", 'Program).

# For feature extraction we need
#
# data Feature = CInt Int | CStr Str | (Pred,Int) | (Atom,Int)

analyze ('Program) {
  Intensional(predName), HeadPredIx(predName, $ix) :-
    <: ..., $pred(...,$ix:$x,...), ... :- ... .:>, ID($pred,predName).

  BodyAtom($predID), BodyAtomIx($predID,$ix) :-
    <: ... :- ...,$predID(...,$ix:$x,...),... .:>.
  BodyAtom($predID), BodyAtomIx($predID,$ix) :-
    <: ... :- ...,NOT($predID(...,$ix:$x,...)),... .:>.

  ConstAux($pred,$ix,$constant) :-
    <: ... :- ..., $pred(...,$ix:$constant,...), ... .:>.
  ConstAux($pred,$ix,$constant) :-
    <: ... :- ..., NOT($pred(...,$ix:$constant,...)), ... .:>.

  ConstStr(constant, predName, ix) :-
    ConstAux(predID,ix,constantID),
    STR(constantID,constant),
    ID(predID, predName).

  ConstInt(constant, predName, ix) :-
    ConstAux(predID,ix,constantID),
    INT(constantID,constant),
    ID(predID, predName).

  # No pred2, ..., NOT pred3 pattern because syntactic ordering is ignored.
  NotSideAux($pix1,$pix2,$pix3,$pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...),
              ..., $pix2:$pred2(...,$ix2:$y,...),
              ..., $pix3:$pred3(...,$ix3:$z,...),... .:>.
  NotSideAux($pix1,$pix2,$pix3,$pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...),
              ..., $pix2:NOT($pred2(...,$ix2:$y,...)),
              ..., $pix3:$pred3(...,$ix3:$z,...),... .:>.
  NotSideAux($pix1,$pix2,$pix3,$pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...),
              ..., $pix2:NOT($pred2(...,$ix2:$y,...)),
              ..., $pix3:NOT($pred3(...,$ix3:$z,...)),... .:>.

  NotSide(predName,ix1,pred3,ix3) :-
    NotSideAux(pix1,pix2,pix3,pred1,pred3,x,y,z,ix1,ix3),
    ID(x,varName), ID(y,varName), ID(z,varName),
    LT(pix1,pix2), LT(pix2,pix3),
    ID(pred1,predName).

  SideAux($pix1,$pix2,$pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...),
              ..., $pix2:$pred2(...,$ix2:$y,...),... .:>.
  SideAux($pix1,$pix2,$pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ... :- ..., $pix1:$pred1(...,$ix1:$x,...),
              ..., $pix2:NOT($pred2(...,$ix2:$y,...)),... .:>.

  Side(predName1,ix1,pred2,ix2) :-
    SideAux(pix1,pix2,pred1,pred2,ix1,ix2,x,y),
    ID(x,varName), ID(y,varName),
    LT(pix1,pix2),
    ID(pred1,predName1), NOT(NotSide(predName1,ix1,pred2,ix2)).

  SideDebug(predName1,ix1,pred2,predName2,ix2) :-
    Side(predName1,ix1,pred2,ix2), ID(pred2,predName2).

  Out(predName1,ix1,predName2,ix2) :-
    Side(predName1,ix1,pred2,ix2), ID(pred2,predName2), Intensional(predName2).

  # No pred2, ..., NOT pred3 pattern because syntactic ordering is ignored.
  NotInAux($pix2,$pix3,$pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ..., $pred1(...,$ix1:$x,...), ...
        :- ..., $pix2:$pred2(...,$ix2:$y,...),
           ..., $pix3:$pred3(...,$ix3:$z,...),... .:>.
  NotInAux($pix2,$pix3,$pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ..., $pred1(...,$ix1:$x,...), ...
        :- ..., $pix2:NOT($pred2(...,$ix2:$y,...)),
           ..., $pix3:$pred3(...,$ix3:$z,...),... .:>.
  NotInAux($pix2,$pix3,$pred1,$pred3,$x,$y,$z,$ix1,$ix3) :-
    <: ..., $pred1(...,$ix1:$x,...), ...
        :- ..., $pix2:NOT($pred2(...,$ix2:$y,...)),
           ..., $pix3:NOT($pred3(...,$ix3:$z,...)),... .:>.

  NotIn(predName,ix1,pred3,ix3) :-
    NotInAux(pix2,pix3,pred1,pred3,x,y,z,ix1,ix3),
    ID(x,varName), ID(y,varName), ID(z,varName),
    LT(pix2,pix3),
    ID(pred1,predName).

  InAux($pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ...,$pred1(...,$ix1:$x,...),... :- ...,$pred2(...,$ix2:$y,...),... .:>.
  InAux($pred1,$pred2,$ix1,$ix2,$x,$y) :-
    <: ...,$pred1(...,$ix1:$x,...),... :- ...,NOT($pred2(...,$ix2:$y,...)),... .:>.

  In(predName1,ix1,pred2,ix2) :-
    InAux(pred1,pred2,ix1,ix2,x,y),
    ID(x,varName), ID(y,varName),
    ID(pred1,predName1), NOT(NotIn(predName1,ix1,pred2,ix2)).

  InDebug(predName1,ix1,pred2,predName2,ix2) :-
    In(predName1,ix1,pred2,ix2), ID(pred2,predName2).

  Through(predName1,ix1,predName2,ix2) :-
    In(predName1,ix1,pred2,ix2), ID(pred2,predName2), Intensional(predName2).

  OpenAtom(predID,ix) :-
    BodyAtomIx(predID,ix),
    NOT(Side(_,_,predID,ix)),
    NOT(In(_,_,predID,ix)),
    ID(predID,predName),
    NOT(ConstStr(_,predName,ix)),
    NOT(ConstInt(_,predName,ix)).

  OpenAtomDebug(predID,predName,ix) :- OpenAtom(predID,ix), ID(predID,predName).

  OpenPred(predName,ix) :-
    HeadPredIx(predName,ix),
    NOT(Out(_,_,predName,ix)),
    NOT(Through(_,_,predName,ix)),
    NOT(ConstStr(_,predName,ix)),
    NOT(ConstInt(_,predName,ix)).
  OpenPred(predName,ix) :-
    OpenAtom(predID,ix),
    ID(predID,predName).
}

OUTPUT('ConstStr).
OUTPUT('ConstInt).
OUTPUT('NotSide).
OUTPUT('Side).
OUTPUT('Out).
OUTPUT('NotIn).
OUTPUT('In).
OUTPUT('Through).
OUTPUT('OpenAtom).
OUTPUT('OpenPred).

OUTPUT('SideDebug).
OUTPUT('InDebug).
OUTPUT('OpenAtomDebug).
