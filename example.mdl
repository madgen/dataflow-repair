Ancestor(x,y) :- Parent(x,y).
Ancestor(x,z) :- Ancestor(y,z), Parent(x,y).

Res(y)  :- P(x, x), T(z), Q(x, 42).
Q(x, x) :- R(x), S(x).
R(x)    :- T(x).

# Expected results

## Derived stuff

# Open predicates:
# (Res,0), (P,0), (P,1), (T,0), (Ancestor,0)

# Open atoms:
# (P,0), (P,1), (T,0), (Ancestor,0)

# Const to pred flow:
# 42 -> (Q,0), (R,0)

# Const to atom flow:
# 42 -> (R(x),0), (T(x),0)

# Predicate to predicate flow:
# (P,1) to (Q,0)
# (P,1) to (R,0)

# Predicate to atom flow:
# (Ancestor,0) to (Parent(x,y),1)
# (P,1) to (Q(x,42),0)
# (P,1) to (R(x),0)
# (P,1) to (T(x),0)
# (R,0) to (S(x),0)

## Base stuff

# Out:
# (P,1) to (Q,0)

# Side:
# (Ancestor,0) to (C2:Parent(x,y),1)
# (P,1)        to (C4:Q(x, 42),0)
# (R,0)        to (C5:S(x),0)

# In:
# (Ancestor,0) to (C1:Parent(x,y),0)
# (Ancestor,1) to (C1:Parent(x,y),1)
# (Ancestor,0) to (C2:Parent(x,y),0)
# (Ancestor,1) to (C2:Ancestor(y,z),1)
# (Q,0)        to (C4:R(x),0)
# (Q,1)        to (C4:R(x),0)
# (R,0)        to (C5:T(x),0)

# Through:
# (Ancestor,1) to (Ancestor,1)
# (Q,0)        to (R,0)
# (Q,1)        to (R,0)

# ConstInt:
# 42 to (Q,1)

# ConstStr:

# OpenAtom:
# (C2:Ancestor(y,z),0)
# (C3:P(x,x),0)
# (C3:P(x,x),1)
# (C3:T(z,x),1)

# OpenPred:
# (Ancestor,0)
# (P,0)
# (P,1)
# (Res,0)
# (T,0)
